✔ Replace apple emojis with the actual ingredient pictures like in the current ingredients list in the meal card @done(25-10-28 10:36)
✔ Don't put the descirption in the area dropdown as well @done(25-10-28 10:51)
✔ No emojis in the ingredients dropdown @done(25-10-28 10:51)
✔ Make the dropdown larger @done(25-10-28 10:51)
✔ Fix the fact that you can still scroll the page after the meal card is opened it's annoying @done(25-10-28 11:09)
✔ Replace "test api" button with a TheMealDB button that redirects to https://www.themealdb.com @done(25-10-28 11:14)
✔ Implement the logo made in canva @done(25-10-28 11:30)
✔ Make the first loading faster by loading only a few items then more when scrolling to optimize for google lighthouse and ecoindex score @done(25-10-28 11:48)
✔ Make the watch on youtube button red @done(25-10-28 20:46)
✔ Change random meals button to random meal button and it opens up a random meal modal card @done(25-10-28 21:15)
✔ dont put the colors in this form [#262523] etc make variables for all the colors used in the project and use this variables in the actual code @done(25-10-29 09:06)
✔ Make the search bar way bigger it must be the center of attraction for the user and visible as well as responsive @done(25-10-29 09:37)
✔ Optimize loading the api calls for the website to be optimized and fast @done(25-10-29)
✔ Sujet prof optimisations et clean code @done(25-10-29 11:34)
✔ Make sure the code is super clean formated with linter prettier eslint strict config and run @done(25-10-29 11:34)
✔ Fix the hover effect of the random meal button and the view recipe button in the meal card so the text is readable and it better handles the hover effect @done(25-10-30 21:33)
✔ Fix the responsive of the "Serve" part of the card with the numbers because on big screens it breaks the layout @done(25-10-30 21:47)
✔ Make the skeleton preload of the meal cards responsive based on the screen size and current layout page of the user @done(25-10-30 21:50)
✔ Refactor the long api.ts file into many smaller files for better maintainability and readability don't change the actual code just the file structure @done(25-10-30 22:20)
✔ Fix all linter errors and warnings @done(25-10-30 22:24)
✔ Implement a CI/CD github actions to check everything best practices @done(25-10-30)
✔ Optimize SEO for the website to be the best in google search results @done(25-10-30 22:45)
✔ Make a full complete and detailed readme of the project include graphs the screenshots i'll take and design items like badges and stat cards etc to prepare for the assignmement IN FRENCH and check the code to make sure everything meet the requirements of the projetcts assignement, here are the instructions in french : @done(25-10-30 22:57)
✔ Recheck linter errors and warnings @done(25-10-30 22:58)
✔ Can you make a final check for the code quality and performance ? @done(25-10-30 23:02)
✔ Pull request to dev @done(25-10-30 23:03)
✔ Pull request from dev to main @done(25-10-30 23:24)
✔ Upload on netlify, main branch @done(25-10-30 23:24)
✔ Change the url of the website from easymealapp.netlify.app to the new netlify url @done(25-10-30 23:24)
✔ Change deploy readme section with netlify infos @done(25-10-30 23:32)
✔ On mobile reaplce title top page from "EasyMeal - Discover Amazing Recipes" with just "EasyMeal" for responsive design purposes @done(25-10-30 23:32)
☐ Update the readme with the new informations
☐ Write the final email


Context : 

    - Intégration API et affichage de données dynamiques.
    - Mise en page responsive **mobile-first**.
    - Utilisation d’un framework CSS (Bootstrap ou Tailwind).
    - Navigation entre deux vues (par exemple : liste / détails, ou statistiques / favoris).
    
    ---
    
    ### **Sprint 3 — Finalisation & hébergement**
    
    - Améliorations UX et responsive (breakpoints, animations, transitions).
    - Accessibilité : contrastes, alt text, structure sémantique.
    - Audit Lighthouse (> 85 recommandé).
    - Déploiement sur Netlify ou GitHub Pages.
    
    ---
    
    ## Barème de notation
    
    | Critère | Points | Détails |
    | --- | --- | --- |
    | **Responsive Design & ergonomie** | 6 | Fluidité, cohérence visuelle, adaptation mobile/tablette/desktop |
    | **Intégration API & logique React** | 5 | Appel API, affichage dynamique, gestion d’état |
    | **Qualité du code & structure** | 3 | Lisibilité, modularité, propreté du code |
    | **Design & UX générale** | 3 | Clarté, hiérarchie, lisibilité des données |
    | **Performance, Accessibilité et Eco-responsabilité** | 3 | Score Lighthouse, Score Eco-Index, sémantique, optimisation |
    
    **Total : 20 points**
    
    ---
    
    ## 🏅 Distinctions spéciales (bonus)
    
    Ces prix apportent jusqu’à **+3 points bonus** maximum au total.
    
    | Distinction | Bonus | Description |
    | --- | --- | --- |
    | **Best UI/UX** | +1 | Interface la plus agréable et cohérente |
    | **Best API Integration** | +0.5 | Données les mieux exploitées |
    | **Clean Code Award** | +0.5 | Code clair, bien organisé, commenté |
    
    ## Modalités de rendu:
    
    - A rendre:
        - avant le 7 Novembre à minuit (début correction le 8 Novembre au matin)
        - contact: [julien.couraud@reseau-cd.net](mailto:julien.couraud@reseau-cd.net)
        - en tête du mail: **[B2DEV - RWD] NOM Prénom**
        - 📘 **Livrables finaux :**
            - Lien du dépôt GitHub
            - Lien de l’app en ligne
            - README avec :
                - pitch de votre projet (quoi ? pourquoi ? pour qui ?)
                - explication de la stack technique (React / Javascript / Bootstrap ou Tailwind)
                - comment lancer le projet (démarche pour obtenir la clé API puis pour lancer le projet) —> .env.example
                - architecture technique (sitemap routing, composants principaux, services, etc..)
                - listes des endpoints appelés sur l’API publique + Lien vers leur documentation
                - captures d’écran (mobile / desktop)
        - 📘 **Requis techniques :**
            - Responsive conditionnel pour au moins 2 types de supports ( SM / MD / LG )
            - Au moins 3 routes API sont appelés depuis une API publique et traités dans le code (peu importe le verbe HTTP, elles peuvent par exemple être les 3 sur un appel GET)
            - Pas d’informations sensibles ou inutiles disponibles en ligne (API_KEY, node_modules, etc..)